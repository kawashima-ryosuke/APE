/*******************************************************************
Version Informarion: ver 3.01 (latest,2019/1/25 kawashima)

This program is a templete macro for analysys.
*******************************************************************/

//header
//for main program
#include <stdio.h>
#include <time.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <iostream>
#include <fstream>
#include <cmath>
using namespace std;
#include <TCanvas.h>
#include <TFile.h>
#include <TTree.h>
#include <TChain.h>
#include <TH1D.h>
#include <TH2D.h>
#include <TMath.h>
#include <TF1.h>
#include <TGraph.h>
#include <TGraphErrors.h>
#include <TMultiGraph.h>
//My include
#include "include/canvas_setting.h"
#include "include/histgram_setting.h"
#include "include/graph_setting.h"
#include "include/branch_setting.h"
#include "include/define.h"
#include "include/fit_function.h"
#include "include/logfile.h"
#include "include/output.h"
#include "include/make_dir.h"

#ifdef __CINT__
int temp_root_macro()
#else
int main(int argc, char** argv)
#endif
{
  //SET data file and DIRECTORY MAKING
  char datafile_directry[letter_num] = "../data/";
  //directory name is written in define.h
  if(argv[1] == "\0" || argv[1] == NULL){
    argv[1] = "tutorial";
  }
  makedir_func(argv,datafile_directry,output_file_directory,logfile_directory);

  //CANVAS
  //canvas variablesn
  Double_t canvas_w = 1250.;//canvas width 
  Double_t canvas_h = 1000.;//canvas height
  //canvas setting(width,height,box potision)
  TCanvas *c1 = canvas_setting(canvas_w,canvas_h,right_top);
  
  //HIST and GRAPH
  //histgram variables
  Double_t x_min = 100.,x_max = 150.;
  Double_t bin_w = 0.1;
  //Int_t x_bin = (x_max - x_min)/bin_w;
  Int_t x_bin = 500;
  //hist and graph setting
  TH1D *hist = histgram_setting(x_min,x_max,x_bin,Form("title"),Form("x_title"),Form("y_title"));
  TGraph *gr = graph_setting(Form("title"),Form("x_title"),Form("y_title"));
  
  //FIT FUNCTION
  TF1 *func = f1_gaus(x_min,x_max);

  //TTREE SET ADRESS
  char tree_name[letter_num] = "tree";//Set Directory
  char *branch_name[] = {"f_gaus"};
  Float_t f_gaus;
  //TTree *tree = branch_setting(argv,rootfile_directry,tree_name);
  TFile *rootfile = new TFile(Form("%s.root",datafile_directry), "READ");
  cout << "> Open Root File" <<endl;
  if (rootfile -> IsZombie()){
    cout << "  + Error Open File" << endl;
    exit(1);
  }
  cout << "  + Get Tree" << endl;
  TTree *tree = (TTree*)rootfile->Get(tree_name);
  cout << "  + Read Branch and Fill" << endl;
  tree -> SetBranchAddress(branch_name[0], &f_gaus);
  
  //MyClass
  //MyClass *myclass = new MyClass();

  /************************************************************************
     MAIN PART OF THIS ANALYSIS
  ***************************************************************************/
  cout << "> Start main part" <<endl;
  //variables of analysis part
  Int_t loop = 0;
  Int_t entry = tree->GetEntries();
  Double_t f_min=100,f_max=150;

  //MAIN ANARYLYS
  while(loop < entry){
    tree->GetEntry(loop);
    hist->Fill(f_gaus);
    loop++;
  }
    
  //Draw hist and graph
  cout << "> Draw hist and graph" << endl;
  const Int_t par_num = 5;
  Double_t fit_par[par_num]={},fit_par_err[par_num]={};

  cout << "> Fitting" << endl;
  func->SetParameter("Mean",125.);
  func->SetParameter("Sigma",30.);
  hist->Fit(func,"hist","S",f_min,f_max);
  for(int i=0;i<2;i++){
    fit_par[i] = func -> GetParameter(i);
    fit_par_err[i] = func -> GetParError(i);
  }

  cout << "> Print hist and graph" << endl;
  c1->Clear();
  hist->Draw();
  c1->Print(Form("%s/hist.pdf",output_file_directory));

  /************************************************************************
     END OF ANALYSIS
  ***************************************************************************/
  //MAKE OUTPUT FILE
  if(output_file_mode)
    output_func(fit_par,fit_par_err,output_file_directory);
  
  else cout << "> Output_File mode OFF" <<endl;
  
  //MAKE LOGFILE
  if(log_file_mode)
    logfile_func(logfile_directory);
  
  else cout << "> LOG FILE mode OFF" <<endl;
  
  cout << " ====================================" << endl;
  cout << " Data File: "<< Form("%s.root",argv[1]) << endl;
  cout << "           PROGRAM FINISHED!!        " << endl;
  cout << " ====================================" << endl;
  return 0;
}
